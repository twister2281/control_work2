1) Что такое модификаторы доступа? Какие модификаторы доступа существуют?
Модификаторы доступа в Java определяют, где и как можно использовать классы, методы и переменные. Это способ ограничить или разрешить доступ к определённым компонентам программы.
Основные модификаторы доступа:


public: доступен отовсюду, как внутри пакета, так и из других пакетов.
protected: доступен внутри своего пакета и для классов-наследников (даже если они находятся в другом пакете).
(по умолчанию, без модификатора): доступ только внутри пакета (package-private).
private: доступен только внутри своего класса.
Пример:

public class Example {
    private int secret; // Доступен только внутри этого класса
    protected int semiSecret; // Доступен в этом пакете и наследниках
    public int open; // Доступен отовсюду
}


2) Что такое интерфейс в Java? Могут ли интерфейсы содержать реализацию методов?
Интерфейс — это как договор: он описывает, что класс должен уметь делать, но не говорит, как именно. В интерфейсе мы объявляем методы, которые обязаны реализовать классы, подписавшиеся на этот договор (т.е. реализующие интерфейс).
До Java 8 интерфейсы могли содержать только объявления методов (без реализации) и статические константы.
С Java 8 интерфейсы могут содержать:
Методы с реализацией по умолчанию (default методы).
Статические методы.
С Java 9 можно также добавлять приватные методы в интерфейсы.
Пример:

interface Animal {
    void makeSound(); // Обычный метод интерфейса
    default void eat() { // Default метод с реализацией
        System.out.println("Eating...");
    }
}


3)В чем разница между абстрактным классом и обычным классом?
Абстрактный класс — это класс, который может содержать как обычные методы с реализацией, так и абстрактные методы (без реализации). Нельзя создать объект абстрактного класса.
Обычный класс — это полноценный класс, у которого есть только методы с реализацией, и из него можно создавать объекты.
Абстрактные классы нужны, чтобы задать базовое поведение для других классов, которые будут его наследовать.

Пример:


abstract class Shape {
    abstract void draw(); // Абстрактный метод
    void moveTo(int x, int y) { // Обычный метод
        System.out.println("Moving to " + x + ", " + y);
    }
}

class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a circle");
    }
}

4) Что понимается под понятием наследование в ООП и как оно упрощает разработку программ?
Наследование — это механизм, при котором один класс (наследник) берет свойства и методы другого класса (родителя). Это позволяет повторно использовать код, избегая его дублирования, и легко расширять функциональность.
Преимущества наследования:

Повторное использование кода.
Возможность расширять существующий функционал без его изменения.
Упрощение поддержки и модификации программ.
Пример:

java
Копировать
Редактировать
class Animal {
    void eat() {
        System.out.println("This animal eats food.");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("This dog barks.");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat(); // Метод родителя
        dog.bark(); // Метод наследника
    }
}
Наследование упрощает разработку, потому что мы можем сосредоточиться на добавлении новой логики, вместо того чтобы писать всё с нуля.